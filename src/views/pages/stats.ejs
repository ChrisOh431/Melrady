<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('../partials/head'); %>
</head>

<body>
    <%- include('../partials/nav'); %>
    <div class="container">
        <div class="album-row">
            <div id="album-cover-row" class="row justify-content-center">

            </div>
        </div>
    </div>

    <div id="canvas-container">
        <canvas id="track_chart" width="100" height="100"></canvas>

        <div style="width: 100%; margin-bottom: 2em;"></div>

        <div class="container">
            <div class="row justify-content-center gap-3">
                <div class="col-auto">
                    <div class="btn-group" role="group" aria-label="Graph Display Mode Toggle">
                        <input type="radio" class="btn-check" name="display-mode-button" id="radar-display"
                            autocomplete="off" checked>
                        <label class="btn btn-outline-success shadow-none" for="radar-display">Radar</label>

                        <input type="radio" class="btn-check" name="display-mode-button" id="bar-display"
                            autocomplete="off">
                        <label class="btn btn-outline-success shadow-none" for="bar-display">Bar</label>
                    </div>
                </div>
                <div class="col-auto">
                    <div class="btn-group" role="group" aria-label="Graph Display Scaling Toggle">
                        <input type="radio" class="btn-check" name="display-scaling-button" id="relative-display"
                            autocomplete="off" checked>
                        <label class="btn btn-outline-success shadow-none" for="relative-display">Relative</label>

                        <input type="radio" class="btn-check" name="display-scaling-button" id="absolute-display"
                            autocomplete="off">
                        <label class="btn btn-outline-success shadow-none" for="absolute-display">Absolute</label>
                    </div>
                </div>
                <div class="col-auto">
                    <div class="btn-group" role="group" aria-label="Graph Display Color Toggle">
                        <input type="radio" class="btn-check" name="display-color-button" id="dominant-color"
                            autocomplete="off" checked>
                        <label class="btn btn-outline-success shadow-none" for="dominant-color">Dominant</label>

                        <input type="radio" class="btn-check" name="display-color-button" id="green-color"
                            autocomplete="off">
                        <label class="btn btn-outline-success shadow-none" for="green-color">Green</label>

                        <input type="radio" class="btn-check" name="display-color-button" id="unique-color"
                            autocomplete="off">
                        <label class="btn btn-outline-success shadow-none" for="unique-color">Unique</label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div style="width: 100%; margin-bottom: 2em;"></div>

    <div class="container overflow-hidden">
        <div class="row gy-4">
            <div class="col-sm-4">
                <div class="card">
                    <div class="card-header">
                        High
                    </div>
                    <ul id="extra-data-1" class="list-group list-group-flush"></ul>
                </div>
            </div>

            <div class="col-sm-4">
                <div class="card">
                    <div class="card-header">
                        Average
                    </div>
                    <ul id="extra-data-2" class="list-group list-group-flush"></ul>
                </div>
            </div>

            <div class="col-sm-4">
                <div class="card">
                    <div class="card-header">
                        Low
                    </div>
                    <ul id="extra-data-3" class="list-group list-group-flush"></ul>
                </div>
            </div>
        </div>
    </div>

    <div style="width: 100%; margin-bottom: 2em;"></div>

    <div class="container overflow-hidden">
        <div class="accordion" id="data-accordion">
            <div class="accordion-item">
                <h2 class="accordion-header" id="full-data-heading">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#full-data-accordion" aria-expanded="false" aria-controls="full-data-accordion">
                        Full Data
                    </button>
                </h2>

                <div id="full-data-accordion" class="accordion-collapse collapse" aria-labelledby="full-data-heading">
                    <div class="accordion-body">
                        <div>
                            <ul>
                                <% for(let i=0; i < tracks_data.tracks.length; i++) {%>
                                    <% let track=tracks_data.tracks[i]; %>
                                        <% let features=track.track_features; %>
                                            <li>
                                                <strong>
                                                    <a href="<%= track.track_url %>" class="link-dark">
                                                        <%= track.track_name %>
                                                    </a>
                                                </strong>
                                            </li>
                                            <ul>
                                                <li>
                                                    Album:
                                                    <a class="link-dark" href="<%= track.track_album_url %>">
                                                        <%= track.track_album %>
                                                    </a>
                                                </li>
                                                <li>
                                                    Artists:
                                                    <% for(let j=0; j < track.track_artists.length; j++) {%>
                                                        <% let artist=track.track_artists[j]; %>
                                                            <% if (j !==track.track_artists.length-1) {%>
                                                                <% artist.name +="," %>
                                                                    <% } %>
                                                                        <span>
                                                                            <a class="link-secondary"
                                                                                href="<%= artist.external_urls.spotify %>">
                                                                                <%=artist.name%>
                                                                            </a>
                                                                        </span>&nbsp;
                                                                        <% } %>
                                                </li>
                                                <li>
                                                    Danceability: <%= features.danceability.toFixed(3) %>
                                                </li>
                                                <li>
                                                    Duration: <%= features.duration.toFixed(3) %> seconds
                                                </li>
                                                <li>
                                                    Energy <%= features.energy.toFixed(3) %>
                                                </li>
                                                <li>
                                                    Loudness <%= features.loudness.toFixed(3) %>
                                                </li>
                                                <li>
                                                    Speechiness <%= features.speechiness.toFixed(3) %>
                                                </li>
                                                <li>
                                                    Tempo <%= features.tempo.toFixed(3) %> BPM
                                                </li>
                                                <li>
                                                    Valence <%= features.valence.toFixed(3) %>
                                                </li>
                                            </ul>
                                            <% } %>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>

    <div style="width: 100%; margin-bottom: 2em;"></div>

    <div class="container">
        <div class="card">
            <div class="card-header">
                Legend
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <h5>Danceability</h5>
                    <p class="card-text">How suitable this track is for dancing, based on tempo, rhythm stability,
                        regularity, and beat strength.</p>
                </li>
                <li class="list-group-item">
                    <h5>Duration</h5>
                    <p class="card-text">Somewhat self-explanatory, this is just the length of the track relative to
                        the others.</p>
                </li>
                <li class="list-group-item">
                    <h5>Energy</h5>
                    <p class="card-text">How fast, loud, and noisy a track is. Represents a perceptual measure of
                        track intensity and activity. Measured based on dynamic range, perceived loudness, timbre,
                        onset rate, and general entropy.</p>
                </li>
                <li class="list-group-item">
                    <h5>Speechiness</h5>
                    <p class="card-text">How close this track is to being only spoken word. The closer the track is to a
                        talk show/audio book, the higher the value.</p>
                </li>
                <li class="list-group-item">
                    <h5>Tempo</h5>
                    <p class="card-text">The speed/pace of a given piece, measured based on average beat duration.</p>
                </li>
                <li class="list-group-item">
                    <h5>Valence</h5>
                    <p class="card-text">Descirbes the musical positivity of a track. Higher values are songs
                        measured to be more happy/cheerful/euphoric, while lower ones indicate sad/depressing/angry
                        music.</p>
                </li>
                <li class="list-group-item">
                    <h5>Loudness</h5>
                    <p class="card-text">The average loudness of a track in decibels (dB). Typically ranges between -60
                        and 0 dB.</p>
                </li>
            </ul>
        </div>
    </div>

    <div style="width: 100%; margin-bottom: 2em;"></div>

    <script>
        const tracks_data_obj = <%-JSON.stringify(tracks_data)%>;

        const html_legend_plugin = {
            id: 'htmlLegend',
            afterUpdate(chart, args, options)
            {
                const legend_list = $('#album-cover-row');
                legend_list.empty();

                const items = chart.options.plugins.legend.labels.generateLabels(chart);

                let tracknum = 0;

                items.forEach(item =>
                {
                    let curr_item = tracks_data_obj.tracks[tracknum];
                    let track_cover_container = $('<div></div>');
                    track_cover_container.addClass(`col-3`);

                    let track_image = $('<img>');
                    track_image.attr('src', `${curr_item.track_image}`);
                    track_image.attr('alt', `album cover for ${curr_item.track_name}`);
                    track_image.addClass("album-cover img-fluid");

                    let track_text = $(`<a></a>`).text(`${item.text}`).css({ "text-align": "center" }).addClass("link-dark").attr('href', curr_item.track_url);
                    track_image.css({
                        "background": item.fillStyle,
                        "border-color": item.strokeStyle,
                        "border-width": '3px',
                        "opacity": item.hidden ? 0.2 : 1.0
                    });

                    track_cover_container.append(track_image);
                    track_cover_container.append(track_text);

                    track_cover_container.click(function clicked()
                    {
                        const { type } = chart.config;
                        if (type === 'pie' || type === 'doughnut')
                        {
                            chart.toggleDataVisibility(item.index);
                        }
                        else
                        {
                            chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));
                        }
                        chart.update();
                    }
                    )

                    legend_list.append(track_cover_container);

                    tracknum++;
                })

                // average
            }
        }

        function get_chart()
        {

        }

        const default_colors = [];
        const different_colors = [];
        default_colors.push("120, 198, 121,", "65, 171, 93,", "35, 132, 67,", "0, 90, 50,", "39, 255, 115,");
        different_colors.push("127, 201, 127,", "190, 174, 212,", "253, 192, 134,", "255, 255, 153,", "76, 174, 255,");
        const dominant_colors = [];
        let datasetlist = [];

        const relative_mappings = {
            "danceability": "danceability",
            "duration": "duration",
            "energy": "energy",
            "speechiness": "speechiness",
            "tempo": "tempo",
            "valence": "valence",
        };

        const absolute_mappings = {
            "danceability": "danceability",
            "energy": "energy",
            "speechiness": "speechiness",
            "valence": "valence",
        };

        let chart_mode = "radar";
        let mapping_mode = relative_mappings;
        let scaling_mode = "relative";
        let track_chart = null;
        let features_obj = "normalized_features";

        function destroy_chart()
        {
            track_chart.destroy();
        }

        function create_chart()
        {
            let canvcontainer = document.getElementById('canvas-container');
            let cnvs = document.getElementById('track_chart');
            let ctx = document.getElementById('track_chart').getContext('2d');

            // get color list
            canvcontainer.width = canvcontainer.clientWidth;
            canvcontainer.height = canvcontainer.clientHeight;

            if (chart_mode === "radar")
            {
                track_chart = new Chart(ctx, {
                    type: 'radar',
                    data: {
                        labels: Object.keys(mapping_mode),
                        datasets: datasetlist,
                    },
                    options: {
                        layout: {
                            padding: {
                                top: 5,
                                bottom: 5,
                            },
                        },
                        responsive: true,
                        plugins: {
                            htmlLegend: {
                                containerID: 'album-cover-row'
                            },
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            r: {
                                angleLines: {
                                },
                                min: 0,
                                max: 1.0,
                                ticks: {
                                    display: false
                                },
                            },
                        }
                    },
                    plugins: [html_legend_plugin]
                });
            }
            else
            {
                track_chart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: Object.keys(mapping_mode),
                        datasets: datasetlist,
                    },
                    options: {
                        layout: {
                            padding: {
                                top: 5,
                                bottom: 5,
                            },
                        },
                        elements: {
                            bar: { borderWidth: 2 }
                        },
                        plugins: {
                            htmlLegend: {
                                containerID: 'album-cover-row'
                            },
                            legend: {
                                display: false
                            }
                        },
                        responsive: true,
                        scales: {
                            xAxes: {
                                display: true,
                                ticks: {
                                    maxRotation: 90,
                                    minRotation: 45
                                }
                            },
                            yAxes: {
                                ticks: {
                                    display: false
                                }
                            },
                        },
                    },
                    plugins: [html_legend_plugin]
                });
            }

            get_chart = () => { return track_chart; }
        }

        function update_colors()
        {
            let chart = get_chart();
            let display_color = $('input[name="display-color-button"]:checked').attr('id');

            const corresponding_color_set = {
                "dominant-color": dominant_colors,
                "green-color": default_colors,
                "unique-color": different_colors,
            };

            for (let i = 0; i < chart.data.datasets.length; i++)
            {
                let border_col = `rgba(${corresponding_color_set[display_color][i]} 0.9)`;
                let background_col = `rgba(${corresponding_color_set[display_color][i]} 0.1)`;
                let set = chart.data.datasets[i];

                set.borderColor = border_col;
                set.backgroundColor = background_col;
                set.pointBackgroundColor = border_col;
                set.pointBorderColor = border_col;
                set.pointHoverBackgroundColor = background_col;
                set.pointHoverBorderColor = background_col;

                $(`#track-${i + 1}-cover`).css({
                    "background-color": background_col,
                    "border-color": border_col
                });
            }

            chart.update();
        }

        const relative_mapping_swap = () =>
        {
            mapping_mode = relative_mappings;
            features_obj = "normalized_features";

            let chart = get_chart();

            generate_data();
            chart.data = {
                labels: Object.keys(mapping_mode),
                datasets: datasetlist
            };
            chart.update();
        };

        const absolute_mapping_swap = () =>
        {
            mapping_mode = absolute_mappings;
            features_obj = "track_features";

            let chart = get_chart();

            generate_data();
            chart.data = {
                labels: Object.keys(mapping_mode),
                datasets: datasetlist
            };
            chart.update();
        };

        function generate_data()
        {
            datasetlist = [];

            const color_averaging = [0, 0, 0];
            let albumnum = 0;
            tracks_data_obj.tracks.forEach((track) =>
            {
                let color = "0, 0, 0,";

                for (let i = 0; i < 3; i++)
                {
                    color_averaging[i] += track.track_color[i];
                }

                if (track.track_color !== null)
                {
                    color = `${track.track_color[0]}, ${track.track_color[1]}, ${track.track_color[2]},`;
                    dominant_colors.push(color);
                }
                else
                {
                    color = differentcolors[albumnum];
                    dominant_colors.push(color);
                }

                let border_col = `rgba(${color} 0.9)`;
                let background_col = `rgba(${color} 0.1)`;

                let set = {
                    label: track.track_name,
                    data: Object.keys(mapping_mode).map(key => track[features_obj][mapping_mode[key]]),
                    borderColor: border_col,
                    backgroundColor: background_col,
                    pointBackgroundColor: border_col,
                    pointBorderColor: border_col,
                    pointHoverBackgroundColor: background_col,
                    pointHoverBorderColor: background_col,
                }

                albumnum++;
                datasetlist.push(set);
            });

            // average
            for (let i = 0; i < 3; i++)
            {
                color_averaging[i] /= tracks_data_obj.tracks.length;
            }

            if (dominant_colors.length === tracks_data_obj.tracks.length + 1)
            {
                dominant_colors.pop();
            }

            const average_color = `${color_averaging[0]}, ${color_averaging[1]}, ${color_averaging[2]},`;
            dominant_colors.push(average_color);
            avgvalue = {
                label: "Average",
                data: Object.keys(mapping_mode).map(key => tracks_data_obj.full_data.averages[mapping_mode[key]]),
                borderColor: `rgba(${average_color} 0.9)`,
                backgroundColor: `rgba(${average_color} 0.1)`,
            }
            //datasetlist.push(avgvalue);
        }

        function new_scale()
        {
            if (scaling_mode === "relative")
            {
                relative_mapping_swap();
            }
            if (scaling_mode === "absolute")
            {
                absolute_mapping_swap();
            }
        }

        $(document).ready(function ()
        {
            generate_data();
            create_chart();

            $('input[name="display-color-button"]').click(() =>
            {
                let chart = get_chart();

                let display_type = $('input[name="display-color-button"]:checked').attr('id');

                const corresponding_color_set = {
                    "dominant-color": dominant_colors,
                    "green-color": default_colors,
                    "unique-color": different_colors,
                };

                for (let i = 0; i < chart.data.datasets.length; i++)
                {
                    let border_col = `rgba(${corresponding_color_set[display_type][i]} 0.9)`;
                    let background_col = `rgba(${corresponding_color_set[display_type][i]} 0.1)`;
                    let set = chart.data.datasets[i];

                    set.borderColor = border_col;
                    set.backgroundColor = background_col;
                    set.pointBackgroundColor = border_col;
                    set.pointBorderColor = border_col;
                    set.pointHoverBackgroundColor = background_col;
                    set.pointHoverBorderColor = background_col;

                    $(`#track-${i + 1}-cover`).css({
                        "background-color": background_col,
                        "border-color": border_col
                    });
                }

                chart.update();
            });

            $('input[name="display-mode-button"]').click(() =>
            {
                let track_chart = get_chart();

                let display_type = $('input[name="display-mode-button"]:checked').attr('id');

                if (display_type === "radar-display" && chart_mode !== "radar")
                {
                    chart_mode = "radar";
                }
                else if (display_type === "bar-display" && chart_mode !== "bar")
                {
                    chart_mode = "bar";
                }
                else
                {
                    return;
                }

                destroy_chart();
                create_chart();
            });

            $('input[name="display-scaling-button"]').click(() =>
            {
                let track_chart = get_chart();

                let new_scaling_mode = $('input[name="display-scaling-button"]:checked').attr('id');

                if (new_scaling_mode === "relative-display" && scaling_mode !== "relative")
                {
                    scaling_mode = "relative";
                    new_scale();
                    update_colors();
                }
                else if (new_scaling_mode === "absolute-display" && scaling_mode !== "absolute")
                {
                    scaling_mode = "absolute";
                    new_scale();
                    update_colors();
                }
                else
                {
                    return;
                }
            });
        });
    </script>

    <script>
        // Highs, Lows, Averages
        const tracks_data_obj_datagathering = <%-JSON.stringify(tracks_data)%>;

        const highs = tracks_data_obj_datagathering.full_data.maximums;
        const avgs = tracks_data_obj_datagathering.full_data.averages;
        const lows = tracks_data_obj_datagathering.full_data.minimums;

        const zeroPad = (num) => String(num).padStart(2, '0')

        function simplify_data(data)
        {
            const { duration, loudness, tempo } = data;

            // duration calc
            let measure = "seconds";
            let minutes = duration / 60;
            let seconds = duration % 60;
            let time = "0:00";

            time = `${Math.trunc(minutes)}:${zeroPad(Math.trunc(seconds))}`

            return [time, (Math.round(loudness) - 60), Math.round(tempo)];
        }

        $(document).ready(function ()
        {
            let data = [simplify_data(highs), simplify_data(avgs), simplify_data(lows)]
            for (let i = 0; i < 3; i++) 
            {
                let set = data[i];
                let list_id = `#extra-data-${i + 1}`;
                $(list_id).append(`<li class="list-group-item">Duration: <strong>${set[0]}</strong></li>`);
                $(list_id).append(`<li class="list-group-item">Loudness: <strong>${set[1]} dB</strong></li>`);
                $(list_id).append(`<li class="list-group-item">Tempo: <strong>${set[2]} BPM</strong></li>`);
            }
        });
    </script>
</body>

</html>